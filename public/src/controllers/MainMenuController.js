class MainMenuController {

    constructor() {


       this.btnNP = document.querySelector("#nproj");
       this.btnOP = document.querySelector("#oproj");

       this.modalEl = document.getElementById("modal-ind");
       this.modalContentEl = document.querySelector(".met-content");

       this.titleEl = this.modalEl.querySelector(".met-title");
       this.subtitleEl = this.modalEl.querySelector(".met-subtitle");

       this.btnCloseModalEl = document.querySelector(".close");

       this.projectList;

       this.currProj = "";

      

       this.initMainmenu();
    }

    initMainmenu(){

        this.btnNP.addEventListener('click', e => {

            this.newProject();
        });

        this.btnOP.addEventListener('click', e => {

            this.getProjectsList();

          
            setTimeout(() => {

                this.openOProject();
                

            }, 1000);

           
        });

        
    }

    newProject(){


        this.modalContentEl.innerHTML = "";
        this.modalEl.style.display = "block";

        this.titleEl.innerHTML = "Novo Projeto";


        this.closeModal();


        let formNP = document.createElement("form");
        formNP.setAttribute("class", "new-project-form");

        let lblTitle = document.createElement("label");
        lblTitle.setAttribute("class", "npf-label");
        lblTitle.textContent = "Título do Projeto"

        let inpTitle = document.createElement('input');
        inpTitle.setAttribute("class", "npf-input");
        inpTitle.setAttribute("id", "npf-title");

        let lblDescr = document.createElement("label");
        lblDescr.setAttribute("class", "npf-label");
        lblDescr.textContent = "Descrição";

        let inpDescr = document.createElement('input');
        inpDescr.setAttribute("class", "npf-input");
        inpDescr.setAttribute("id", "npf-descr");

        

        let lblStartDate = document.createElement("label");
        lblStartDate.setAttribute("class", "npf-label");


        lblStartDate.textContent = "Data de Início"

        let inpStartDate = document.createElement('input');

        inpStartDate.setAttribute("class", "npf-input");
        inpStartDate.setAttribute("type", "date");
        inpStartDate.setAttribute("id", "npf-date");

        let btnCreate = document.createElement('button');
        btnCreate.setAttribute("class", "btn-nf");
        btnCreate.setAttribute("id", "btn-nform");
        btnCreate.setAttribute("type", "submit");
        btnCreate.innerHTML = "Criar Projeto";

        inpTitle.setAttribute("required", "");
        inpDescr.setAttribute("required", "");
        inpStartDate.setAttribute("required", "");

        this.modalContentEl.append(formNP);
        formNP.append(lblTitle, inpTitle, lblDescr, inpDescr, lblStartDate, inpStartDate, btnCreate);




        formNP.addEventListener('submit', e => {

            if(!Util.dateValidator(inpStartDate.value)) {
                
                alert("Data invalida")
                e.preventDefault();
                return false;
            }

            let randomNum = Math.floor(Math.random() * 1000);

            let title = inpTitle.value

            title = title.replace(/\s+/g, '');

            this.currProj = `project-${randomNum}${title}${inpStartDate.value}`

            sessionStorage.setItem("sessionId", this.currProj);

            e.preventDefault();
            let project = {
                title: inpTitle.value,
                description: inpDescr.value,
                startDate: inpStartDate.value,

                checklist: {
                    collab: false,
                    job: false,
                    email: false,
                    userpatterns: false,
                    databreach: false,
                    deepWebCredentials: false,
                    pastebin: false,
                    trello: false,
                    similarDomains: false,
                    cache: false,
                    ghacking: false,
                    bhacking: false,
                    ndn: false,
                    metadata: false,
                    relevInfo: false,

                    whois: false,
                    rdap: false,
                    ip: false,
                    bgp: false,
                    shodan: false,
                    censys: false,
                    certificate: false,
                    directDns: false,
                    reverseDns: false,
                    dnsZoneTransfer: false,
                    virustotal: false,
                    dnsdumpster: false,
                    securitytrails: false,
                    spf: false,
                    subdomains: false,
                    subdomaintakeover: false,

                    robots: false,
                    sitemap: false,
                    directoryListing: false,
                    mirrorWebsite: false,
                    codeErrors: false,
                    webserver: false,
                    methods: false,
                    directories: false,
                    files: false,
                    wappalyzer: false,
                    waf: false,

                    route: false,
                    activeHosts: false,
                    tcpPorts: false,
                    udpPorts: false,
                    activeServices: false,
                    os: false,
                    defense: false,

                    serviceDetails: false,
                    entryPoints: false,
                    badConfig: false,
                    sensitiveData: false,
                    defaultCred: false,
                    bruteForce: false,

                    publicVn: false,
                    publicExploits: false,
                    unkVn: false
                },
                vulnerabilities: [],
                details: [],
                projID: this.currProj
            }

            this.savetodb('project', JSON.stringify(project))

            window.location.assign('/pentest');

        })



    }

    savetodb(url, data) {

        Fetch.post(`/${url}`, JSON.parse(data));


    }

    

    openOProject(){

        //Criar modal na view, e depois add conteudo (detalhe: estabelecer rota para )

        this.getOpenProjModal();
    }


    getOpenProjModal() {
        this.getProjectsList();
        
        this.modalContentEl.innerHTML = "";
        this.modalEl.style.display = "block";
        this.titleEl.innerHTML = "Abrir Projeto";
        

        let openPjbox = document.createElement("div");
        openPjbox.id = "open-pj"



        let select = document.createElement("select");
        select.name = "projects";
        select.id = "ddprojects"



        let btnSelect = document.createElement("button");
        btnSelect.textContent = "Abrir Projeto"
        btnSelect.id = "btnSelect";
        btnSelect.className = "btn-nf";

        this.modalContentEl.appendChild(openPjbox)

        openPjbox.appendChild(select);
        openPjbox.appendChild(btnSelect);
        let params = {"project":[]};
        console.log(this.isEmptyObj(this.projectList, params))
        console.log(JSON.stringify(this.projectList));

        
        if ( !this.isEmptyObj(this.projectList, params)) {
            
            openPjbox.style.display = "block";
            this.subtitleEl.innerHTML = "Selecione um projeto para abrir:";
            

        Object.keys(this.projectList).forEach(proj => {

            for (let p of this.projectList[proj]) {

                let option = document.createElement("option");
                option.value = p.projID
                option.text = p.title
                select.appendChild(option);
            }

        });
        btnSelect.addEventListener('click', e => {

            this.currProj = select.value;
            sessionStorage.setItem("sessionId", this.currProj);
            //let test = { project: this.currProj};
            
            window.location.assign('/pentest')
           

        });

    } else {

        openPjbox.style.display = "none";
            this.subtitleEl.innerHTML = "Ainda não há nenhum projeto.";
    }

        this.closeModal();

    }

    isEmptyObj(obj, params) {

        if(JSON.stringify(obj) == JSON.stringify(params)) return true;
        else return false;
        
    }

    closeModal() {
        this.btnCloseModalEl.onclick = () => {
            this.modalEl.style.display = "none";
        };
    }


    getProjectsList() {


        fetch(`/project/`)

            .then((response) => response.json())
            .then((data) => {
                this.projectList = data;
            })
            .catch((error) => {
                console.error(error)
            })


    }





}