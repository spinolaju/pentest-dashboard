
class PentestController {

    constructor() {
        this.loaderEl = document.getElementById("loader");
        this.loaderOnOff("on");
        this.modalEl = document.getElementById("myModal");

        this.btnModalAddEl = document.getElementById("btn-add");
        this.btnModalEditEl = document.getElementById("btn-edit");
        this.modalContentEl = document.querySelector(".met-content");
        this.mFormBox = document.querySelector(".form-box");
    
        this.btnModalCancelEl = document.getElementById("modal-cancel");
        this.formAddContentEl = document.querySelector(".met-add");

        this.titleEl = this.modalEl.querySelector(".met-title");
        this.subtitleEl = this.modalEl.querySelector(".met-subtitle");

        this.vnTableEl = document.querySelector(".vn-table");

        this.detailsTabEl = document.querySelector("#details-tab");

        this.btnAbout = document.querySelector("#btn-about");
        this.btnNewProjEl = document.querySelector("#btn-new-project");
        this.btnSaveProjEl = document.querySelector("#btn-save-project");
        this.btnOpenProjEl = document.querySelector("#btn-open-project");
        this.btnCloseProjEl = document.querySelector("#close-proj");
        
        
        this.accordionEl = document.querySelector("#accordion");

        this.elementIdElEl;
        
        this.initialize();

        this.notesShow;
        this.projDt;
        this.currProj = "";
        this.btnCloseModalEl = document.querySelector(".close");


        this.projTitle = document.getElementById("proj-title");
        this.projDate = document.getElementById("proj-date");
        this.projDesc = document.getElementById("proj-descr");

        this.checklist = document.getElementById("checklist");

        this.projectList;

        this.totalVn = document.querySelector("#vn-total");
        
        
        this.infoOnload();

       

    }


    initialize() {

        
        
        this.getAccordion();
        this.addNewNote();
        this.onCancel();
        this.onSubmit();
        this.initNtButtons();
   

        this.initNPEvent();

        

        this.setChecklist();
        this.saveProject();
        this.initOpenProject();
        this.initVnButtons();
        this.initDetailButtons();
       
        this.closeProj();

        this.about();


    }



    about() {

        this.btnAbout.addEventListener('click', () => {

        
            this.btnModalAddEl.style.display = "none";
    
            this.modalContentEl.innerHTML = "";
            this.modalEl.style.display = "block";
    
            this.titleEl.innerHTML = "Sobre o 'Pentest Dashboard'";

            this.subtitleEl.innerHTML = `
            <p class="about">Web Application <a href="https://github.com/spinolaju">Juliane Spinola</a> </p>
            <p class="about">Pentest Checklist: <a href="https://desecsecurity.com/curso/novo-pentest-profissional">Ricardo Longatto - Desec Security</a></p>
            
            `

            this.closeModal();
    


        })
    }

    initOpenProject() {

        this.btnOpenProjEl.addEventListener('click', e => {

            this.getProjectsList();
            setTimeout(() => {
                this.getOpenProjModal();
            }, 1000);
        });
    }


    getOpenProjModal() {
        this.modalContentEl.innerHTML = "";
        this.modalEl.style.display = "block";
        this.btnModalAddEl.style.display = "none";
        this.titleEl.innerHTML = "Abrir Projeto";
        this.subtitleEl.innerHTML = "Selecione um projeto para abrir:";

        let openPjbox = document.createElement("div");
        openPjbox.id = "open-pj";

        let select = document.createElement("select");
        select.name = "projects";
        select.id = "ddprojects"



        let btnSelect = document.createElement("button");
        btnSelect.textContent = "Abrir Projeto"
        btnSelect.id = "btnSelect";
        btnSelect.className = "btn-nf";

        this.modalContentEl.appendChild(openPjbox)

        openPjbox.appendChild(select);
        openPjbox.appendChild(btnSelect);

        if (this.projectList != null || this.projectList != undefined ) {


            Object.keys(this.projectList).forEach(proj => {

                for (let p of this.projectList[proj]) {
    
                    let option = document.createElement("option");
                    option.value = p.projID
                    option.text = p.title
                    select.appendChild(option);
                }
    
            });

            btnSelect.addEventListener('click', e => {

                this.currProj = select.value;
                sessionStorage.setItem("sessionId", this.currProj);
                this.loadProject(this.currProj);
    
                setTimeout(() => {
                    this.displayInfo();
                    this.modalEl.style.display = "none";
                }, 1000);
    
    
    
            });
        } else {

            openPjbox.style.display = "none";
            this.subtitleEl.innerHTML = "Ainda não há nenhum projeto.";
        }


        
      

        this.closeModal();

    }



    getProjectsList() {


        fetch(`/project/`)

            .then((response) => response.json())
            .then((data) => {
                this.projectList = data;
            })
            .catch((error) => {
                console.error(error)
            })


    }

    saveProject() {

        this.btnSaveProjEl.addEventListener('click', e => {

            try {

                Fetch.put(`/project/${this.projDt.projID}`, this.projDt);


            } catch (error) {

                console.error(error);
            }

            alert("Projeto salvo com sucesso!");

        });
    }



    getSessionId() {
        this.currProj = sessionStorage.getItem("sessionId");

        
        if (this.currProj) {


            this.loadProject(this.currProj);
           

        } else {

            window.location.assign('/')
            
        }
    }


    
    getModal(action, title = "", subtitle = "", content = "") {

        switch (action) {

            case "notes":
                this.getNotesModal(title, subtitle, content);
                break;

            case "newProj":
                this.getNewProjModal();


                break;


        }
    }



    /* Event that triggers the form to add a new note*/
    addNewNote() {

        this.btnModalAddEl.addEventListener('click', e => {

            this.hideShowNotes("add");

        });
    }

    onCancel() {
        this.btnModalCancelEl.addEventListener('click', e => {

            e.preventDefault();
            this.hideShowNotes("cancel");
        });
    }

    /* Submitting a new note*/
    onSubmit() {

        this.formAddContentEl.addEventListener("submit", e => {
            e.preventDefault();

            let note = this.getContents();

            this.savetodb("notes", JSON.stringify(note));

            this.clearInputs(this.formAddContentEl);
            
            this.getElements(this.elementIdEl);
            this.hideShowNotes("submit");
        });
    }

    /* Save to database */
    savetodb(url, content) {

        Fetch.post(`/${url}`, JSON.parse(content));

    }

/* Close the current project */
    closeProj() {

        this.btnCloseProjEl.addEventListener('click', e => {

            sessionStorage.clear();
            window.location.assign('/');

        })
    }



    /* Retrieve notes from Database by its category */
    retrieveFromDb(cat) {

        fetch(`/notes/${cat}`)
            .then((response) => response.json())
            .then((data) => {
                this.notesShow = data
            })
            .catch((error) => {
                console.error(error)
            })

    }



    clearInputs(form) {

        form.reset();

    }



    /* Whether hide/show input to add a new note */
    hideShowNotes(action) {

        switch (action) {
            case "add":
                this.btnModalAddEl.style.display = "none";
                this.formAddContentEl.style.display = "block";
                this.modalContentEl.style.display = "none";
                break;
            case "submit":
            case "cancel":
            case "close":
                this.formAddContentEl.style.display = "none";
                this.modalContentEl.style.display = "block";
                break;
            case "newProj":
                this.formAddContentEl.style.display = "none";
                this.subtitleEl.innerHTML = "";

        }


    }
    /* Expand or Collapse checklist elements */
    getAccordion() {
        let acc = document.getElementsByClassName("acc-btn");
        let i;

        for (i = 0; i < acc.length; i++) {
            acc[i].addEventListener("click", function () {
                this.classList.toggle("active");
                let panel = this.nextElementSibling;
                if (panel.style.maxHeight) {
                    panel.style.maxHeight = null;
                } else {
                    panel.style.maxHeight = panel.scrollHeight + "px";
                }
            });
        }
    }


    /* Display a modal to add or view current notes */
    getNotesModal(title, subtitle, content) {

        this.modalContentEl.innerHTML = "";
        this.btnModalAddEl.style.display = "block";

        let contentContainerEl = this.modalEl.querySelector(".met-content");
        let textElement, divFlex, btnEdit, btnDel;

        contentContainerEl.innerHTML = "";
        

        if (content.length === 0 || content === null || content === undefined) {

            contentContainerEl.innerHTML = "Ainda não há nenhuma anotação.";
        }

        [...content].forEach(cont => {

            btnEdit = document.createElement('button');
            btnDel = document.createElement('button');
            divFlex = document.createElement('div');
            divFlex.setAttribute("class", "flexDiv");
            divFlex.setAttribute("id", `div-${cont._id}`);

            textElement = document.createElement('p');
            textElement.setAttribute("class", "ptag");
            textElement.setAttribute("id", `p-${cont._id}`);
            textElement.innerHTML = ` ${cont.content}`

            btnEdit.setAttribute("class", "modal-btn-e");
            btnEdit.setAttribute("id", `e-${cont._id}`);
            btnEdit.textContent = "Editar";

            btnDel.setAttribute("class", "modal-btn-d");
            btnDel.setAttribute("id", `d-${cont._id}`);
            btnDel.textContent = "Deletar";

            contentContainerEl.appendChild(divFlex);
            divFlex.appendChild(textElement);
            divFlex.appendChild(btnEdit);
            divFlex.appendChild(btnDel);

        })

        this.editNtButtons(".modal-btn-e", "e-");
        this.editNtButtons(".modal-btn-d", "d-");


        this.titleEl.innerHTML = title
        this.subtitleEl.innerHTML = subtitle;

        

        this.modalEl.style.display = "block";


       this.closeModal();


    }

    /* Initialize all the 'vulnerabilities' button */
    initVnButtons() {
        let buttons = document.querySelectorAll('a[href="#vulnerabilities"]');
        buttons.forEach((btn, index) => {
            btn.addEventListener('click', e => {

                let btnId = btn.id

                this.getVn(btnId);
            });
        });
    }

      /* Filter the vulnerabilities to display in the modal by its category */
    getVn(btnId) {


        this.elementIdEl = btnId.replace("vn-", "");


        let lblSubtitle = this.accordionEl.querySelector("#lbl-" + this.elementIdEl).textContent;

        let title = this.getGroup(this.elementIdEl);


        setTimeout(() => {

            this.getVnModal(title, lblSubtitle);
        }, 2000);


    }

    cancelVn(btn) {

        btn.addEventListener('click', e => {
            e.preventDefault();

            this.hideShowVn("cancel");
        })
    }

    hideShowVn(action) {

        switch (action) {

            case "cancel":
                this.getVn(this.elementIdEl)
                break;
        }

    }

    /* Display vulnerability modal */
    getVnModal(title, subtitle) {


        this.modalContentEl.innerHTML = "";
        this.modalEl.style.display = "block";
        this.btnModalAddEl.style.display = "none";
        this.titleEl.innerHTML = title;
        this.subtitleEl.innerHTML = subtitle;

        let contentfromDB = document.createElement('div');
        this.modalContentEl.appendChild(contentfromDB);


        //for each vulnerability create a table line with some info and update/delete buttons

        let vn = this.projDt.vulnerabilities;
        let divFlex, btnEdit, textElement, btnDel, noContents;
        let vncount = 0;

        vn.forEach(v => {

            if (v.vnId === this.elementIdEl) {

                btnEdit = document.createElement('button');
                btnDel = document.createElement('button');
                divFlex = document.createElement('div');
                divFlex.setAttribute("class", "flexDiv");
                divFlex.setAttribute("id", `div-${v.uid}`);

                textElement = document.createElement('p');
                textElement.setAttribute("class", "ptag");
                textElement.setAttribute("id", `p-${v.uid}`);
                textElement.innerHTML = ` ${v.vnTitle}`

                btnEdit.setAttribute("class", "vn-edit");
                btnEdit.setAttribute("id", `evn-${v.uid}`);
                btnEdit.textContent = "Editar";

                btnDel.setAttribute("class", "vn-del");
                btnDel.setAttribute("id", `dvn-${v.uid}`);
                btnDel.textContent = "Deletar";

                contentfromDB.appendChild(divFlex);
                divFlex.appendChild(textElement);
                divFlex.appendChild(btnEdit);
                divFlex.appendChild(btnDel);
                vncount++;

            }



        })
        if (vncount === 0) {

            noContents = document.createElement('p');
            noContents.innerHTML = "Ainda não há nenhum vulnerabilidade.";

            contentfromDB.appendChild(noContents);

        }


        this.editNtButtons(".vn-edit", "evn-");
        this.editNtButtons(".vn-del", "dvn-");



        let btnAddNewVn = document.createElement('button');
        btnAddNewVn.setAttribute("class", "btn-nf")
        btnAddNewVn.id = "btn-newVn";
        btnAddNewVn.innerHTML = "Adicionar Vulnerabilidade"


        contentfromDB.appendChild(btnAddNewVn);



        btnAddNewVn.addEventListener('click', e => {

            contentfromDB.innerHTML = "";

            btnAddNewVn.style.display = "none";


            let newVnForm = this.vnForm();
            
            
            let lblImg = document.createElement("label");
            lblImg.setAttribute("class", "npf-label");
            lblImg.textContent = "Imagens"

            let inpImg = document.createElement('input');
            inpImg.setAttribute("class", "npf-input");
            inpImg.setAttribute("name", "vnImg");
            inpImg.setAttribute("type", "file");


            let imgDiv = document.createElement('div');
            imgDiv.id = "imgDiv";

            let bntAddMoreImg =  document.createElement('button');
            bntAddMoreImg.setAttribute("class", "btn-plus");
            bntAddMoreImg.innerHTML = "+";

            imgDiv.append(inpImg);
            
            bntAddMoreImg.addEventListener('click', e => {

                e.preventDefault();
                let imgp = document.createElement('input');
                imgp.setAttribute("class", "npf-input");
                imgp.setAttribute("name", "vnImg");
                imgp.setAttribute("type", "file");
                imgp.setAttribute("name", "image");

                imgDiv.append(imgp);


            } )

            let fdiv = document.createElement('div');
            fdiv.id = "btnEl-box";


            let btnCancel = document.createElement('button');
            btnCancel.setAttribute("class", "btn-vn-cc");
            btnCancel.innerHTML = "Cancelar";

            let btnSubmitVn = document.createElement('button');
            btnSubmitVn.setAttribute("class", "btn-nf");
            btnSubmitVn.setAttribute("id", "btn-vn");
            btnSubmitVn.setAttribute("type", "submit");
            btnSubmitVn.innerHTML = "Salvar";
            fdiv.append(btnCancel, btnSubmitVn);

            

           
            this.cancelVn(btnCancel);

            this.modalContentEl.appendChild(newVnForm);
            newVnForm.append(lblImg, imgDiv, bntAddMoreImg, fdiv);

            


            newVnForm.addEventListener('submit', e => {
                e.preventDefault();

                //Add name to inputs on the form and a forEach loop to iterate through them to get information

                let vn = {
    
                    uid: "",
                    vnId: this.elementIdEl,
                    category: `${title} / ${subtitle}`,
                    vnTitle: "",
                    vnDescription: "",
                    date: "",
                    risk: "",
                    status: "",
                    image: []
                };

                [...newVnForm].forEach((input)=> {

                    let randomNum = Math.floor(Math.random() * 1000);
                    


                    if(input.name == "date") {
                        if(!Util.dateValidator(input)) {
                
                            alert("Data invalida")
                            e.preventDefault();
                            return false;
                        }
                       vn.uid = `vn-${input.valueAsNumber + randomNum}-${this.elementIdEl}`;
                    } 

                   
                    
                    switch(input.name) {

                        case "vnTitle":
                            vn.vnTitle = input.value;
                            break;
                        case "vnDescription":
                            vn.vnDescription = input.value;
                            break;

                        case "date":
                            vn.date = input.value;
                            break;
                        case "risk":
                            vn.risk = input.value;
                            break;
                        case "status":
                            vn.status = input.value;
                            break;
                    }

            
                })

                let result = this.getImage(newVnForm);
                   result.then(img => {
                    
    
                    img.forEach(i => {
    
                        let imgId = this.generateId();
    
                        let imgValues = {id: imgId, source: i}
    
                        vn.image.push(imgValues);
    
                        imgId++;
                    
                    })
                    
                }).then( () => {

                   
                this.projDt.vulnerabilities.push(vn);
                this.updateOrDelete(this.projDt.projID, this.projDt)

                }), (e) => {

                    console.error(e);  
                }

            });
        });

        this.closeModal();
    }

    closeModal() {
        this.btnCloseModalEl.onclick = () => {
            this.hideShowNotes("close");
            this.modalEl.style.display = "none";
        };

        

    }

    vnForm() {

        let newVnForm = document.createElement("form");
        newVnForm.setAttribute("class", "vn-form");

        let lblTitle = document.createElement("label");
        lblTitle.setAttribute("class", "npf-label");
        lblTitle.textContent = "Titulo da Vulnerabilidade"

        let inpTitle = document.createElement('input');
        inpTitle.setAttribute("class", "npf-input");
        inpTitle.setAttribute("id", "npf-title");
        inpTitle.setAttribute("name", "vnTitle");


        let lblDescr = document.createElement("label");
        lblDescr.setAttribute("class", "npf-label");
        lblDescr.textContent = "Descrição";
        

        let inpDescr = document.createElement('textarea');
        inpDescr.setAttribute("class", "desc-txt");
        inpDescr.setAttribute("rows", "5");
        inpDescr.setAttribute("id", "npf-descr");
        inpDescr.setAttribute("name", "vnDescription");

        let lblDate = document.createElement("label");
        lblDate.setAttribute("class", "npf-label");
        lblDate.textContent = "Data"

        let inpDate = document.createElement('input');

        inpDate.setAttribute("class", "npf-input");
        inpDate.setAttribute("type", "date");
        inpDate.setAttribute("id", "npf-date");
        inpDate.setAttribute("name", "date");

        let lblRisk = document.createElement("label");
        lblRisk.setAttribute("class", "npf-label");
        lblRisk.textContent = "Risco";

        let select = document.createElement("select");
        select.name = "risco";
        select.setAttribute("class", "npf-input");
        select.setAttribute("name", "risk");

        let  low = document.createElement("option");
        low.value = "Baixo"
        low.text = "Baixo"

        let moderate = document.createElement("option");
        moderate.value = "Moderado"
        moderate.text = "Moderado"

        let high = document.createElement("option");
        high.value = "Alto"
        high.text = "Alto Risco"

        let critical = document.createElement("option");
        critical.value = "Critico"
        critical.text = "Crítico"

        select.append(low, moderate, high, critical);

        let lblStatus = document.createElement("label");
        lblStatus.setAttribute("class", "npf-label");
        lblStatus.textContent = "Status";

        let statusSel = document.createElement("select");
        statusSel.name = "status";
        statusSel.setAttribute("class", "npf-input");
        statusSel.setAttribute("name", "status");
        

        let fixed = document.createElement("option");
        fixed.value = "Corrigida"
        fixed.text = "Corrigida"

        let fixing = document.createElement("option");
        fixing.value = "Corrigindo"
        fixing.text = "Corrigindo"

        let notFixed = document.createElement("option");
        notFixed.value = "Não Corrigida"
        notFixed.text = "Não Corrigida"

        inpTitle.setAttribute("required", "");
            inpDescr.setAttribute("required", "");
            inpDate.setAttribute("required", "");
        statusSel.append(fixed, fixing, notFixed);

        newVnForm.append(lblTitle, inpTitle, lblDescr, inpDescr, lblDate, inpDate, lblRisk, select, lblStatus, statusSel);
        return newVnForm

    }

    /* Display a form inside the modal to update a vulnerability */
    editVn(id) {


        let index = this.projDt.vulnerabilities.findIndex(el => el.uid === id);
        let element = this.projDt.vulnerabilities[index];


        let edit = document.getElementById(`evn-${id}`);
        let del = document.getElementById(`dvn-${id}`);
        let pElement = document.getElementById(`p-${id}`);

        pElement.style.display = "none";
        edit.style.display = "none";
        del.style.display = "none";

        this.modalContentEl.innerHTML = "";


        let newVnForm = this.vnForm();

        [...newVnForm].forEach((input) => {


            switch(input.name) {

                case "vnTitle":
                    input.value = element.vnTitle;
                    break;
                case "vnDescription":
                    input.value = element.vnDescription;
                    break;

                case "date":
                    input.value = element.date;
                    break;
                case "risk":
                    input.value = element.risk;
                    break;
                case "status":
                    input.value = element.status;
                    break;
            }



        });


        let lblImg = document.createElement("label");
        lblImg.setAttribute("class", "npf-label");
        lblImg.textContent = "Imagens";

        let btnDelImg;

        let imgDiv = document.createElement('div');
        imgDiv.id = "imgDiv";

        let imgs = element.image;


            imgs.forEach((el) => {

                if  (el.source != "") {

                let imgEl = new Image();
                imgEl.setAttribute("class", "img-thumb");
                imgEl.setAttribute("name", "vnImg-thumb");
                imgEl.setAttribute("id", `vnImg${el.id}`);
    
                imgEl.src = el.source;

                btnDelImg =  document.createElement('button');
                btnDelImg.setAttribute("class", "btn-del");
                btnDelImg.setAttribute("id", `del${el.id}`);
                btnDelImg.innerHTML = "X";
    
                imgDiv.append(imgEl, btnDelImg);
               
            } 
            });


   
    
        this.initDelBtn(element, imgDiv);

    
        let bntAddMoreImg =  document.createElement('button');
        bntAddMoreImg.setAttribute("class", "btn-plus");
        bntAddMoreImg.innerHTML = "+";

        

        bntAddMoreImg.addEventListener('click', e => {

            e.preventDefault();
            let imgp = document.createElement('input');
            imgp.setAttribute("class", "npf-input");
            imgp.setAttribute("name", "vnImg");
            imgp.setAttribute("type", "file");
            imgDiv.append(imgp);


        } )

        

        let fdiv = document.createElement('div');
        fdiv.id = "btnEl-box";


        let btnCancel = document.createElement('button');
        btnCancel.setAttribute("class", "btn-vn-cc");
        btnCancel.innerHTML = "Cancelar";


        let btnSubmitVn = document.createElement('button');
        btnSubmitVn.setAttribute("class", "btn-nf");
        btnSubmitVn.setAttribute("id", "btn-vn");
        btnSubmitVn.setAttribute("type", "submit");
        btnSubmitVn.innerHTML = "Salvar";

        fdiv.append(btnCancel, btnSubmitVn);
        this.modalContentEl.appendChild(newVnForm);
        newVnForm.append(lblImg, imgDiv, bntAddMoreImg, fdiv);

        this.cancelVn(btnCancel);

        newVnForm.addEventListener("submit", e => {
            
            e.preventDefault();

            [...newVnForm].forEach((input)=> {

                
                if(input.name == "date") {
                    if(!Util.dateValidator(input)) {
            
                        alert("Data invalida")
                        e.preventDefault();
                        return false;
                    }
                } 

               
                
                switch(input.name) {

                    case "vnTitle":
                        element.vnTitle = input.value;
                        break;
                    case "vnDescription":
                        element.vnDescription = input.value;
                        break;

                    case "date":
                        element.date = input.value;
                        break;
                    case "risk":
                        element.risk = input.value;
                        break;
                    case "status":
                        element.status = input.value;
                        break;
                }

        
            })

            let image = this.getImage(newVnForm).then(img => {


               img.forEach( i => {
                
                let imgId = this.generateId();

                let imgValues = {id: imgId, source: i}

                element.image.push(imgValues);

                imgId++;
                

               })

               

            this.projDt.vulnerabilities[index] = element;

            this.updateOrDelete(this.projDt.projID, this.projDt);

                

            }, (e) => {

                console.error(e);
            }).then(() => {

                this.clearInputs(newVnForm);
            });

        });


    }

    /*Initialize all the  'delete image' buttons */
    initDelBtn(element, imgDiv) {

        let delButtons = imgDiv.querySelectorAll(".btn-del");

        delButtons.forEach((btn, index) => {
            btn.addEventListener('click', e => {
                e.preventDefault();

                let id = btn.id

         
            id = id.replace("del","");


        let ind = element.image.findIndex(imgId => imgId.id === id);


        let imgToRemove = imgDiv.querySelector(`#vnImg${id}`);


        imgDiv.removeChild(imgToRemove);
        let splice = element.image.splice(ind, 1);
        imgDiv.removeChild(btn);
            });
        });

    }

    /*Upload and read images */
    readImg(file) {

        return new Promise((resolve, reject) => {

            let fileReader = new FileReader();

            

            fileReader.onload = () => {

                resolve(fileReader.result);
            };

            fileReader.onerror = () => {
                reject(e);
            };


            (file) ? fileReader.readAsDataURL(file) : resolve('');
            
        });

    }
    


        /*Get uploaded images to be added to the DB */
        getImage(formEl) {

            let elements = [];
            let readers = [];

            let el = [...formEl.elements].filter(item => {
                if (item.name === 'vnImg') {
                    elements.push(item);
                }
            });

            

           let files = [];

            
            for(let i = 0; i < elements.length; i++) {
                
                files.push(elements[i].files[0]);


            }

            

            for(let i = 0;i < files.length;i++){
                readers.push(this.readImg(files[i]));

                
            }

            return Promise.all(readers);
        }
    
        /*Generate a unique ID */
        generateId(){
            let date = new Date().getTime();
            let uuid = 'xxxx-4xxx-yxxx'.replace(/[xy]/g, (c) => {
                let r = (date + Math.random()*16)%16 | 0;
                date = Math.floor(date/16);
                return (c=='x' ? r :(r&0x3|0x8)).toString(16);
            });
            return uuid;
        }

        /*Initialize all the 'details' buttons */
        initDetailButtons() {
            let buttons = document.querySelectorAll('a[href="#addDetails"]');
            buttons.forEach((btn, index) => {
                btn.addEventListener('click', e => {
    
                    let btnId = btn.id
    
                    this. getDetails(btnId);
                });
            });
        }


    /*retrieve and display details data according to its category */
        getDetails(btnId) {


            this.elementIdEl = btnId.replace("dt-", "");
    
    
            let lblSubtitle = this.accordionEl.querySelector("#lbl-" + this.elementIdEl).textContent;
    
            let title = this.getGroup(this.elementIdEl);
    
    
            setTimeout(() => {
    
                this.getDtModal(title, lblSubtitle);
            }, 2000);
    
    
        }

        /*Display details modal */
        getDtModal(title, subtitle) {

           

                this.modalContentEl.innerHTML = "";
                
                this.modalEl.style.display = "block";
                this.btnModalAddEl.style.display = "none";
                this.titleEl.innerHTML = title;
                this.subtitleEl.innerHTML = subtitle;
        
                let contentfromDB = document.createElement('div');
                let onlyct = document.createElement('div');

                onlyct.setAttribute("class", "contentDB");
                this.modalContentEl.appendChild(contentfromDB);

                contentfromDB.appendChild(onlyct);
        
        
                let dt = this.projDt.details;
                let divFlex, btnEdit, descEl, btnDel, noContents;
                let dtCount  = 0;


                dt.forEach(d => {

                    if (d.dtId === this.elementIdEl) {

                        let imgs = d.image;
        
                        btnEdit = document.createElement('button');
                        btnDel = document.createElement('button');
                        divFlex = document.createElement('div');
                        divFlex.setAttribute("class", "div-dt");
                        divFlex.setAttribute("id", `div-${d.uid}`);
        

                        descEl = document.createElement('p');
                        descEl.setAttribute("class", "textArea");
                        descEl.setAttribute("id", `t-${d.uid}`);
                        descEl.innerHTML = ` ${d.dtDescription}`

                        

                        onlyct.appendChild(divFlex);
                        
                        divFlex.append(descEl);

                        let imgDiv = document.createElement('div');
                        imgDiv.setAttribute("class", "img-dt-div");
                        
                        
                        if(imgs != undefined) {

                            

                            imgs.map((el) => {
                
                
                                
                                let imgDetails = new Image();
                                imgDetails.setAttribute("class", "evid-img");
                    
                                imgDetails.src = el.source;
                                
                                imgDiv.append(imgDetails);
                               
                            });
                
                        } 
                        

        
                        btnEdit.setAttribute("class", "dt-edit");
                        btnEdit.setAttribute("id", `edt-${d.uid}`);
                        btnEdit.textContent = "Editar";
        
                        btnDel.setAttribute("class", "dt-del");
                        btnDel.setAttribute("id", `ddt-${d.uid}`);
                        btnDel.textContent = "Deletar";
                        
                        divFlex.append(imgDiv, btnEdit, btnDel);
                        dtCount++;
        
                    }
        
        
        
                });

                if (dtCount === 0) {
        
                    noContents = document.createElement('p');
                    noContents.innerHTML = "Ainda não há nenhuma evidência.";
        
                    contentfromDB.appendChild(noContents);
        
                }
        
        
                this.editNtButtons(".dt-edit", "edt-");
                this.editNtButtons(".dt-del", "ddt-");
        
        
        
                let btnAddNewDt = document.createElement('button');
                btnAddNewDt.setAttribute("class", "btn-nf")
                btnAddNewDt.id = "btn-newDt";
                btnAddNewDt.innerHTML = "Adicionar Detalhes"
        
        
                contentfromDB.appendChild(btnAddNewDt);
        
        
        
                btnAddNewDt.addEventListener('click', e => {
        
                    contentfromDB.innerHTML = "";
        
                    btnAddNewDt.style.display = "none";
        
        
                    let newDtForm = document.createElement("form");
                    newDtForm.setAttribute("class", "dt-form");
        
                    let lblDescr = document.createElement("label");
                    lblDescr.setAttribute("class", "npf-label");
                    lblDescr.textContent = "Descrição";
        
                    let inpDescr = document.createElement('textarea');
                    inpDescr.setAttribute("class", "desc-txt");
                    inpDescr.setAttribute("rows", "5");
                    inpDescr.setAttribute("id", "npf-descr");

                    let imgDiv = document.createElement('div');
                    imgDiv.id = "imgDiv";

                    let lblImg = document.createElement("label");
                     lblImg.setAttribute("class", "npf-label");
                    lblImg.textContent = "Imagens"

                    let inpImg = document.createElement('input');
                    inpImg.setAttribute("class", "img-input");
                inpImg.setAttribute("name", "vnImg");
                inpImg.setAttribute("type", "file");


            

            let bntAddMoreImg =  document.createElement('button');
            bntAddMoreImg.setAttribute("class", "btn-plus");
            bntAddMoreImg.innerHTML = "+";

            imgDiv.append(inpImg);
            
            bntAddMoreImg.addEventListener('click', e => {

                e.preventDefault();
                let imgp = document.createElement('input');
                imgp.setAttribute("class", "npf-input");
                imgp.setAttribute("name", "vnImg");
                imgp.setAttribute("type", "file");
                

                imgDiv.append(imgp);

            });

            
                    
                    inpDescr.setAttribute("required", "");
   
        

        
                    let fdiv = document.createElement('div');
                    fdiv.id = "btnEl-box";
        
        
                    let btnCancel = document.createElement('button');
                    btnCancel.setAttribute("class", "btn-vn-cc");
                    btnCancel.innerHTML = "Cancelar";
        
                    let btnSubmitDt = document.createElement('button');
                    btnSubmitDt.setAttribute("class", "btn-nf");
                    btnSubmitDt.setAttribute("id", "btn-vn");
                    btnSubmitDt.setAttribute("type", "submit");
                    btnSubmitDt.innerHTML = "Salvar";
                    fdiv.append(btnCancel, btnSubmitDt);
        
    
                    this.modalContentEl.appendChild(newDtForm);
                    newDtForm.append(lblDescr, inpDescr, lblImg, imgDiv, bntAddMoreImg, fdiv);
        
                
        
        
                    newDtForm.addEventListener('submit', e => {
                        e.preventDefault();

                        
        
                        
                        let uid = this.generateId();
        
                        let dt = {
        
                            uid: uid,
                            dtId: this.elementIdEl,
                            category: `${title} / ${subtitle}`,
                            dtDescription: inpDescr.value,
                            image: []
                        }

                        let result = this.getImage(newDtForm);
                       
                        result.then(img => {

                         img.forEach(i => {

         
                             let imgId = this.generateId();
         
                             let imgValues = {id: imgId, source: i}
         
                             dt.image.push(imgValues);
         
                             imgId++;
                            })
                         
                         }).then( () => {

                            this.projDt.details.push(dt);
        
                            this.updateOrDelete(this.projDt.projID, this.projDt);
                       
        
                        }), (e) => {
        
                            console.error(e);  
                        }
        
                    });
   
        
                    });
        
                    
        
                
                this.closeModal();

            }
        
    

        /*Initialize all the 'notes' buttons */
    initNtButtons() {
        let buttons = document.querySelectorAll('a[href="#notes"]');
        buttons.forEach((btn, index) => {
            btn.addEventListener('click', e => {

                let btnId = btn.id

                this.getElements(btnId);
            });
        });
    }

    /*trigger events of deleting or updating according to the button id */
    editNtButtons(query, replacer) {
        let btnEd = document.querySelectorAll(query);
        btnEd.forEach((btn, index) => {
            btn.addEventListener('click', e => {

                let btnId = btn.id

                btnId = btnId.replace(replacer, "");

                switch (replacer) {

                    case "e-":
                        this.editNote(btnId);
                        break;

                    case "d-":
                        this.deleteNote(btnId);
                        

                        break;

                    case "evn-":
                        this.editVn(btnId);
                        break;

                    case "dvn-":
                        this.delVn(btnId);
                        break;

                        case "edt-":
                        this.editDt(btnId);
                        break;

                    case "ddt-":
                        this.delDt(btnId);
                }

            });
        });


    }

    /*Modal to edit details */
    editDt(id){

        let index = this.projDt.details.findIndex(el => el.uid === id);
        let element = this.projDt.details[index];


        let edit = document.getElementById(`edt-${id}`);
        let del = document.getElementById(`ddt-${id}`);
       
        let tElement = document.getElementById(`t-${id}`);

        
        tElement.style.display = "none";
        edit.style.display = "none";
        del.style.display = "none";

        this.modalContentEl.innerHTML = "";

        let newDtForm = document.createElement("form");
        newDtForm.setAttribute("class", "dt-form");


        let lblDescr = document.createElement("label");
        lblDescr.setAttribute("class", "npf-label");
        lblDescr.textContent = "Descrição";

        let inpDescr = document.createElement('textarea');
        inpDescr.setAttribute("class", "desc-txt");
        inpDescr.setAttribute("rows", "5");
        inpDescr.setAttribute("id", "npf-descr");
        inpDescr.value = element.dtDescription;

        let lblImg = document.createElement("label");
        lblImg.setAttribute("class", "npf-label");
        lblImg.textContent = "Imagens";

        let btnDelImg;

        let imgDiv = document.createElement('div');
        imgDiv.id = "imgDiv";

        let imgs = element.image;


            imgs.forEach((el) => {

                if  (el.source != "") {

                let imgEl = new Image();
                imgEl.setAttribute("class", "img-thumb");
                imgEl.setAttribute("name", "vnImg-thumb");
                imgEl.setAttribute("id", `vnImg${el.id}`);
    
                imgEl.src = el.source;

                btnDelImg =  document.createElement('button');
                btnDelImg.setAttribute("class", "btn-del");
                btnDelImg.setAttribute("id", `del${el.id}`);
                btnDelImg.innerHTML = "X";
    
                imgDiv.append(lblImg, imgEl, btnDelImg);
               
            } 
            });


   
    
        this.initDelBtn(element, imgDiv);

    
        let bntAddMoreImg =  document.createElement('button');
        bntAddMoreImg.setAttribute("class", "btn-plus");
        bntAddMoreImg.innerHTML = "+";

        

        bntAddMoreImg.addEventListener('click', e => {

            e.preventDefault();
            let imgp = document.createElement('input');
            imgp.setAttribute("class", "npf-input");
            imgp.setAttribute("name", "vnImg");
            imgp.setAttribute("type", "file");
            imgDiv.append(imgp);


        } )



        let fdiv = document.createElement('div');
        fdiv.id = "btnEl-box";

      
        inpDescr.setAttribute("required", "");
   


        let btnCancel = document.createElement('button');
        btnCancel.setAttribute("class", "btn-vn-cc");
        btnCancel.innerHTML = "Cancelar";

        let btnSubmitDt = document.createElement('button');
        btnSubmitDt.setAttribute("class", "btn-nf");
        btnSubmitDt.setAttribute("id", "btn-vn");
        btnSubmitDt.setAttribute("type", "submit");
        btnSubmitDt.innerHTML = "Salvar";
        fdiv.append(btnCancel, btnSubmitDt);

     

        this.modalContentEl.appendChild(newDtForm);
        newDtForm.append(lblDescr, inpDescr, lblImg, imgDiv, bntAddMoreImg, fdiv);

        newDtForm.addEventListener('submit', e => {

            e.preventDefault();

            let image = this.getImage(newDtForm).then(img => {


                img.forEach( i => {
                 
                 let imgId = this.generateId();
 
                 let imgValues = {id: imgId, source: i}
 
                 element.image.push(imgValues);
 
                 imgId++;
                 
 
                })

                element.dtDescription =  inpDescr.value;


            this.projDt.details[index] = element;

            this.updateOrDelete(this.projDt.projID, this.projDt);


            }, (e) => {

                console.error(e);

            })
        })

        
    }

    /* Display the data when the page is loaded*/
    infoOnload() {
        

        window.addEventListener("load", e =>
        {

            
            
            this.getSessionId();
            

           

            setTimeout(() => {
        
                setTimeout(() =>  {
                    this.loaderOnOff("off")
                },300)
              
                this.displayInfo(); 
              },1000)

            
            
            
            
           

        });
    }

    /*Display a loader while loading the data*/
    loaderOnOff(state) {

        switch(state){
            case 'on':
                this.loaderEl.style.display = "block";
                break;

            case 'off':
                this.loaderEl.style.display = "none";
                break;
        }
    }

    /* Updating or deleting vulnerabilities/details on the Database*/
    updateOrDelete(projID, content) {
        Fetch.put(`/project/${projID}`, content)

            .then(() => {
                this.loadProject(projID)
            })
            .then(() => {
                this.displayInfo();
                this.modalEl.style.display = "none";
            });


    }


    /*Delete a vulnerability */
    delVn(id) {


        let index = this.projDt.vulnerabilities.findIndex(el => el.uid === id);


        let element = this.projDt.vulnerabilities.splice(index, 1);

        this.updateOrDelete(this.projDt.projID, this.projDt)

    }

    /*Delete details */
    delDt(id) {


        let index = this.projDt.details.findIndex(dt => dt.uid === id);


        let element = this.projDt.details.splice(index, 1);

        this.updateOrDelete(this.projDt.projID, this.projDt)

    }


    /*Edit a note */
    editNote(id) {

        this.btnModalAddEl.style.display = "none";
        let newForm = document.createElement('form');
        let divFlex = document.getElementById(`div-${id}`);
        let edit = document.getElementById(`e-${id}`);
        let del = document.getElementById(`d-${id}`);

        newForm.setAttribute("class", "form-update");

        let btnSub = document.createElement('button');
        divFlex.appendChild(newForm);
        let pElement = document.getElementById(`p-${id}`);


        let inputElement = document.createElement('input');
        inputElement.setAttribute("class", "input-nf")
        inputElement.value = pElement.textContent;
        newForm.appendChild(inputElement);

        pElement.style.display = "none";
        edit.style.display = "none";
        del.style.display = "none";

        inputElement.setAttribute("required", "");

        btnSub.setAttribute("type", "submit");
        btnSub.setAttribute("class", "btn-nf");
        btnSub.innerHTML = "Salvar"
        newForm.appendChild(btnSub);

        newForm.addEventListener("submit", e => {
            // e.preventDefault();

            let note = {
                category: this.elementIdEl,
                content: ""
            };

            note.content = inputElement.value


            Fetch.put(`/notes/${id}`, note).then(() => {

                divFlex.removeChild(newForm);
                this.getElements(this.elementIdEl);
                pElement.style.display = "block";
                edit.style.display = "block";
                del.style.display = "block";


            })

           


        });
    }


    /*Delete a note */
    deleteNote(id) {
        return Fetch.delete(`/notes/${id}`).then(() => { this.getElements(this.elementIdEl)});
        
    }

    /*Display all information retrieved from the Database */
    displayInfo() {

       
        
        for (let prop in this.projDt) {
           

            switch (prop) {

                case "title":
                    this.projTitle.innerHTML = this.projDt[prop]
                    break;

                case "description":
                    this.projDesc.innerHTML = this.projDt[prop]
                    break;

                case "startDate":
                    this.projDate.innerHTML = `Data de Início: ${this.projDt[prop]}`;
                    break;

                case "checklist":
                    this.displayChecklistfromDB();
                    break;

                case "vulnerabilities":

                    this.displayVnTable();
                    this.riskCounter();
                    this.getDetailsTab()
                    break;


            }
           
            
            

        }
         
       


    }

    /*Display a table listing all vulnerabilities and its status */
    displayVnTable() {

        let vnData = this.projDt.vulnerabilities;
        let tbody = this.vnTableEl.querySelector('tbody')


            tbody.innerHTML = "";
            vnData.forEach(vn => {

                let tr = document.createElement('tr');
    
                tr.innerHTML = ` 
                <td>${vn.date}</td>
                <td>${vn.uid}</td>
                <td>${vn.vnTitle}</td>
                <td> <span class="status">${vn.status}</span></td>
                <td>${vn.risk}</td>
            `;
    
        
                tbody.append(tr);
    
               let statusCol = tr.querySelector(".status");
    
    
                switch(vn.status){
                    case "Corrigida":
                        statusCol.className = "statusFixed"
                        break;
                    case "Corrigindo":
                        statusCol.className = "statusFixing"
                        break;
                        case "Não Corrigida":
                        statusCol.className = "statusNotFixed"
                        break;
                }
    
            })


        
        
        

        




    }

    /*Display the number of vulnerabilities in the cards according to its risk level */
    riskCounter() {

        let low = 0,
            moderate = 0,
            high = 0,
            critical = 0,
            total = 0;

        let vulnerabilities = this.projDt.vulnerabilities;

        if (vulnerabilities != undefined) {

            vulnerabilities.forEach(vn => {

                total++;
                switch (vn.risk) {

                    case "Baixo":
                        low++;
                        break;

                    case "Moderado":
                        moderate++;
                        break;
                    case "Alto":
                        high++;
                        break;
                    case "Critico":
                        critical++;
                        break;
                }


            });
        }



        document.querySelector("#low-risk").innerHTML = low;
        document.querySelector("#mod-risk").innerHTML = moderate;
        document.querySelector("#high-risk").innerHTML = high;
        document.querySelector("#critical-risk").innerHTML = critical;

        if (total == 0 || total > 1) this.totalVn.innerHTML = `${total} vulnerabilidades encontradas.`
        else this.totalVn.innerHTML = `${total} vulnerabilidade encontrada.`

    }


    //Get sibling elements of the note that been clicked
    getElements(btnId) {


        this.elementIdEl = btnId.replace("nt-", "");

        this.retrieveFromDb(this.elementIdEl);

        let lblSubtitle = this.accordionEl.querySelector("#lbl-" + this.elementIdEl).textContent;

        let title = this.getGroup(this.elementIdEl);


        setTimeout(() => {

            this.getModal("notes", title, lblSubtitle, this.notesShow);
        }, 2000);




    }




    getContents() {

        let notes = {
            category: this.elementIdEl,
            content: ""
        };

        let el = this.formAddContentEl.querySelector('input')

        el.setAttribute("required", "");
        notes.content = el.value;

        return notes;

    }


    /*New Project button Event */
    initNPEvent() {

        this.btnNewProjEl.addEventListener('click', e => {

            this.getModal("newProj");
        });


    }


    /*Display a modal to create a new project */
    getNewProjModal() {

        this.hideShowNotes("newProj");

        this.btnModalAddEl.style.display = "none";

        this.modalContentEl.innerHTML = "";
        this.modalEl.style.display = "block";

        this.titleEl.innerHTML = "Novo Projeto";


        this.closeModal();


        let formNP = document.createElement("form");
        formNP.setAttribute("class", "new-project-form");

        let lblTitle = document.createElement("label");
        lblTitle.setAttribute("class", "npf-label");
        lblTitle.textContent = "Título do Projeto"

        let inpTitle = document.createElement('input');
        inpTitle.setAttribute("class", "npf-input");
        inpTitle.setAttribute("id", "npf-title");

        let lblDescr = document.createElement("label");
        lblDescr.setAttribute("class", "npf-label");
        lblDescr.textContent = "Descrição";

        let inpDescr = document.createElement('input');
        inpDescr.setAttribute("class", "npf-input");
        inpDescr.setAttribute("id", "npf-descr");

        let today = new Date();

        let lblStartDate = document.createElement("label");
        lblStartDate.setAttribute("class", "npf-label");


        lblStartDate.textContent = "Data de Início"

        let inpStartDate = document.createElement('input');

        inpStartDate.setAttribute("class", "npf-input");
        inpStartDate.setAttribute("type", "date");
        inpStartDate.setAttribute("id", "npf-date");

        let btnCreate = document.createElement('button');
        btnCreate.setAttribute("class", "btn-nf");
        btnCreate.setAttribute("id", "btn-nform");
        btnCreate.setAttribute("type", "submit");
        btnCreate.innerHTML = "Criar Projeto";

        inpTitle.setAttribute("required", "");
        inpDescr.setAttribute("required", "");
        inpStartDate.setAttribute("required", "");

        this.modalContentEl.append(formNP);
        formNP.append(lblTitle, inpTitle, lblDescr, inpDescr, lblStartDate, inpStartDate, btnCreate);


        
        formNP.addEventListener('submit', e => {

            if(!Util.dateValidator(inpStartDate.value)) {
                
                alert("Data invalida")
                e.preventDefault();
                return false;
            }
            
            let randomNum = Math.floor(Math.random() * 1000);

            let title = inpTitle.value

            title = title.replace(/\s+/g, '');

            this.currProj = `project-${randomNum}${title}${inpStartDate.value}`


            sessionStorage.setItem("sessionId", this.currProj);

        
            e.preventDefault();

            
            let project = {
                title: inpTitle.value,
                description: inpDescr.value,
                startDate: inpStartDate.value,

                checklist: {
                    collab: false,
                    job: false,
                    email: false,
                    userpatterns: false,
                    databreach: false,
                    deepWebCredentials: false,
                    pastebin: false,
                    trello: false,
                    similarDomains: false,
                    cache: false,
                    ghacking: false,
                    bhacking: false,
                    ndn: false,
                    metadata: false,
                    relevInfo: false,

                    whois: false,
                    rdap: false,
                    ip: false,
                    bgp: false,
                    shodan: false,
                    censys: false,
                    certificate: false,
                    directDns: false,
                    reverseDns: false,
                    dnsZoneTransfer: false,
                    virustotal: false,
                    dnsdumpster: false,
                    securitytrails: false,
                    spf: false,
                    subdomains: false,
                    subdomaintakeover: false,

                    robots: false,
                    sitemap: false,
                    directoryListing: false,
                    mirrorWebsite: false,
                    codeErrors: false,
                    webserver: false,
                    methods: false,
                    directories: false,
                    files: false,
                    wappalyzer: false,
                    waf: false,

                    route: false,
                    activeHosts: false,
                    tcpPorts: false,
                    udpPorts: false,
                    activeServices: false,
                    os: false,
                    defense: false,

                    serviceDetails: false,
                    entryPoints: false,
                    badConfig: false,
                    sensitiveData: false,
                    defaultCred: false,
                    bruteForce: false,

                    publicVn: false,
                    publicExploits: false,
                    unkVn: false
                },
                vulnerabilities: [],
                details: [],
                projID: this.currProj
            }

            this.savetodb('project', JSON.stringify(project))

            this.clearInputs(formNP);


            this.loadProject(this.currProj);


            setTimeout(() => {

                this.displayInfo();
                this.modalEl.style.display = "none";
            }, 1000);



        })



    }

    /*Load the project from database by the ID */
    loadProject(projID) {
        fetch(`/project/${projID}`)

            .then((response) => response.json())
            .then((data) => {

                this.projDt = data[0];
            }).then(this.displayInfo())
            .catch((error) => {
                console.error(error)
            })


    }


    //Get group name of the element that has been clicked
    getGroup(elementId) {

        let title = "";

        switch (elementId) {

            case 'collab':
            case 'job':
            case 'email':
            case 'userpatterns':
            case 'databreach':
            case 'deepWebCredentials':
            case 'pastebin':
            case 'trello':
            case 'similarDomains':
            case 'cache':
            case 'ghacking':
            case 'bhacking':
            case 'ndn':
            case 'metadata':
            case 'relev-info':
                title = this.accordionEl.querySelector(".title-igb").textContent;
                break;

            case 'whois':
            case 'rdap':
            case 'ip':
            case 'bgp':
            case 'shodan':
            case 'censys':
            case 'certificate':
            case 'directDns':
            case 'reverseDns':
            case 'dnsZoneTransfer':
            case 'virustotal':
            case 'dnsdumpster':
            case 'securitytrails':
            case 'spf':
            case 'subdomains':
            case 'subdomaintakeover':
                title = this.accordionEl.querySelector(".title-igi").textContent;
                break;

            case 'robots':
            case 'sitemap':
            case 'directoryListing':
            case 'mirrorWebsite':
            case 'codeErrors':
            case 'webserver':
            case 'methods':
            case 'directories':
            case 'files':
            case 'wappalyzer':
            case 'waf':
                title = this.accordionEl.querySelector(".title-igw").textContent;
                break;

            case 'route':
            case 'activeHosts':
            case 'tcpPorts':
            case 'udpPorts':
            case 'activeServices':
            case 'os':
            case 'defense':
                title = this.accordionEl.querySelector(".title-rec").textContent;
                break;

            case 'serviceDetails':
            case 'entryPoints':
            case 'badConfig':
            case 'sensitiveData':
            case 'defaultCred':
            case 'bruteForce':
                title = this.accordionEl.querySelector(".title-ada").textContent;
                break;

            case 'publicVn':
            case 'publicExploits':
            case 'unkVn':
                title = this.accordionEl.querySelector(".title-avn").className;
                break;
        }

        return title;

    }

    /*Set the checklist data when checking/unchecking itens */

    setChecklist() {

        let checklist = this.accordionEl.querySelectorAll('input[type=checkbox]');


        checklist.forEach((checkbox, index) => {

            checkbox.addEventListener('change', e => {

                let checkboxId = checkbox.id;

                checkboxId = checkboxId.replace("cb-", "");

                Object.keys(this.projDt.checklist).forEach(check => {


                    if (check == checkboxId) {

                        if (checkbox.checked)
                            this.projDt.checklist[check] = true;

                        else
                            this.projDt.checklist[check] = false;

                    }

                })
            });



        });

    }


   /*Retrieve and display all the checked itens from Database */

    displayChecklistfromDB() {

        Object.keys(this.projDt.checklist).forEach(check => {

            let checkboxElement = `cb-${check}`
            let checkItem = document.querySelector(`#${checkboxElement}`);

            if (this.projDt.checklist[check] === true) {

                checkItem.checked = true;
            } else {

                checkItem.checked = false;
            }

        })

    }


    /*Insert all vulnerabilities into the tab details */

    getDetailsTab() {


        this.detailsTabEl.innerHTML = "";
        let vulnerabilities = this.projDt.vulnerabilities;
        
        vulnerabilities.forEach(vn => {


        let detailsContainer = document.createElement("div");
        detailsContainer.setAttribute("class", "details-container");

        let vnTitle = document.createElement("h2");
        vnTitle.innerHTML = vn.vnTitle;

        let vnCategory = document.createElement("h4");
        vnCategory.innerHTML = vn.category;

        let vnDescription = document.createElement("p");
        vnDescription.innerHTML = vn.vnDescription;

        
        let imgs = vn.image;

        detailsContainer.append(vnTitle, vnCategory, vnDescription);


        
        if(imgs != undefined) {

            imgs.forEach((el) => {



                let imgDetails = new Image();
                imgDetails.setAttribute("class", "details-img");
    
                imgDetails.src = el.source;
    
                detailsContainer.append(imgDetails);
               
            });

        }
        


        this.detailsTabEl.appendChild(detailsContainer);




        });
        





    }

}